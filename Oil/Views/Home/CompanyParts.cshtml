@{
    // Assuming Layout is set in _ViewStart.cshtml or similar
    Layout = "~/Views/Shared/_Layout.cshtml";
    var initialDirection = Context.Request.Cookies["Language"] == "en" ? "ltr" : "rtl";
}
<div class="container text-center padding">
    <h2 class="section-title" data-en="Categories" data-ar="الاصناف">الاصناف</h2>
</div>
<section class="pb-5 company-tabs">
    <div class="container">
        <ul class="list-unstyled d-flex flex-wrap justify-content-center gap-3 gap-md-4">
            <li class="border border-danger py-2 px-4 px-md-5 rounded-pill active-filter" data-en="All" data-ar="الكل" data-id="all">الكل</li>

            @if (ViewBag.ProductTypes != null)
            {
                foreach (var type in (List<ProductType>)ViewBag.ProductTypes) // Cast to List<ProductType>
                {
                    <li class="border border-danger py-2 px-4 px-md-5 rounded-pill"
                        data-en="@type.ProductTypeEn"
                        data-ar="@type.ProductTypeAr"
                        data-id="@type.Id">
                        @(initialDirection == "rtl" ? type.ProductTypeAr : type.ProductTypeEn)
                    </li>
                }
            }
        </ul>
    </div>
</section>

<section class="ships-products padding pt-0">
    <div class="container text-center" data-aos="fade" data-aos-delay="100">
        <div class="row g-4 justify-content-center">
            @if (ViewBag.Products != null && ((List<Oil.Models.Product>)ViewBag.Products).Any())
            {
                foreach (var product in ((List<Oil.Models.Product>)ViewBag.Products).Where(p => p.IsVisible))
                {
                    var productPrice = product.Price;
                    var productImage = Url.Content(string.IsNullOrEmpty(product.ImageUrl) ? "/images/products/default.png" : product.ImageUrl);
                    var productTitleLocalized = initialDirection == "rtl" ? product.TitleAr : product.TitleEn;
                    if (string.IsNullOrEmpty(productTitleLocalized)) productTitleLocalized = product.TitleAr ?? product.TitleEn;


                    var btnTextAddToCartLocalized = initialDirection == "rtl" ? "اضافه للسلة" : "Add To Cart";
                    var btnTextConfirmLocalized = initialDirection == "rtl" ? "تأكيد" : "Confirm";
                    var btnTextDetailsLocalized = initialDirection == "rtl" ? "عرض التفاصيل" : "Show Details";

                    <div class="col-6 col-md-4 col-lg-3 d-flex product-card-item" data-product-id="@product.Id" data-title-ar="@product.TitleAr"
                         data-title-en="@product.TitleEn"
                         data-price="@productPrice"
                         data-image="@productImage"
                         data-producttypeid="@product.ProductTypeId"
                         style="min-height:420px;">
                        <div class="card w-100">
                            <div class="img m-0" style="height: 220px; overflow:hidden;">
                                <img style="width:100%; height:100%; object-fit: contain;" src="@productImage" alt="@productTitleLocalized" onerror="this.onerror=null;this.src='/images/products/default.png';">
                            </div>
                            <div class="content d-flex flex-column gap-1 p-2 p-md-3 flex-grow-1">
                                <h3 class="fs-6 fw-semibold" data-en="@product.TitleEn" data-ar="@product.TitleAr" style="min-height: 3em; overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical;">@productTitleLocalized</h3>
                                <span class="text-danger fs-5 fw-bold mt-auto" data-ar="@product.Price جنيه" data-en="EGP @product.Price">@product.Price @(initialDirection == "rtl" ? "جنيه" : "EGP")</span>
                                <div class="mt-2">
                                    <a href="@Url.Action("productDetail", "Home", new { id = product.Id })" class="btn btn-sm btn-outline-info show-details w-100 mb-1" data-ar="تفاصيل المنتج" data-en="Products Details">@btnTextDetailsLocalized</a>
                                    <button class="btn btn-sm btn-danger add-to-cart w-100" data-ar="اضافه للسلة" data-en="Add To Cart">@btnTextAddToCartLocalized</button>
                                </div>
                                <div class="quantity-section d-none mt-2 p-1" style="display: flex; justify-content: space-between; gap: 5px;">
                                    <input type="number" class="form-control form-control-sm quantity-input" min="1" value="1" style="width: 60px;" aria-label="Quantity" />
                                    <button class="btn btn-sm btn-success confirm-add flex-grow-1" data-ar="تأكيد" data-en="Confirm">@btnTextConfirmLocalized</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="col-12"><p class="text-muted fs-5" data-ar="لا توجد منتجات تطابق هذا الفلتر حاليًا." data-en="No products match this filter currently.">لا توجد منتجات تطابق هذا الفلتر حاليًا.</p></div>
            }
        </div>
    </div>
</section>

@section Scripts {
    <script>
        // Ensure updateCartBadge is available (e.g., from index.js or define it here if this page is standalone)
        if (typeof updateCartBadge !== 'function') {
            function updateCartBadge() {
                const cart = JSON.parse(localStorage.getItem('cart')) || [];
                const totalQuantity = cart.reduce((sum, p) => sum + (p.quantity || 0), 0);
                const badge = document.querySelector(".fixed-cart-button .badge");
                if (badge) {
                    badge.textContent = totalQuantity;
                    badge.style.display = totalQuantity > 0 ? 'inline-block' : 'none';
                }
            }
        }

        document.addEventListener("DOMContentLoaded", function () {
            const productCards = document.querySelectorAll(".product-card-item"); // Target specific cards
            const filterItems = document.querySelectorAll(".company-tabs ul li");
            const currentLangDirection = document.documentElement.dir || "rtl";

            filterItems.forEach(item => {
                item.addEventListener("click", () => {
                    const selectedFilterId = item.getAttribute('data-id');
                    filterItems.forEach(i => i.classList.remove('active-filter'));
                    item.classList.add('active-filter');

                    productCards.forEach(card => {
                        if (selectedFilterId === "all" || card.getAttribute("data-producttypeid") === selectedFilterId) {
                            card.style.display = "flex"; // Use flex as parent is d-flex
                        } else {
                            card.style.display = "none";
                        }
                    });
                });
            });

            productCards.forEach(card => {
                const addToCartBtn = card.querySelector(".add-to-cart");
                const quantitySection = card.querySelector(".quantity-section");
                const confirmAddBtn = card.querySelector(".confirm-add");
                const quantityInput = card.querySelector(".quantity-input");

                addToCartBtn?.addEventListener("click", () => {
                    if(quantitySection) quantitySection.classList.remove("d-none");
                    if(addToCartBtn) addToCartBtn.classList.add("d-none");
                });

                confirmAddBtn?.addEventListener("click", () => {
                    const productIdString = card.getAttribute("data-product-id"); // Use data-product-id
                    const productId = parseInt(productIdString);

                    const titleAr = card.getAttribute("data-title-ar") || "";
                    const titleEn = card.getAttribute("data-title-en") || "";
                    let productTitleForCart = (currentLangDirection === 'rtl' ? titleAr : titleEn).trim();
                    if (!productTitleForCart) { productTitleForCart = (titleAr || titleEn || (currentLangDirection === 'rtl' ? "منتج" : "Product")).trim(); }

                    const priceString = card.getAttribute("data-price");
                    const productPrice = parseFloat(priceString);

                    const productImage = card.getAttribute("data-image") || "/images/products/default.png";
                    const quantity = parseInt(quantityInput.value);

                    if (isNaN(productId) || productId <= 0) {
                        console.error("Invalid productId on CompanyParts:", productIdString, "from card:", card);
                        Swal.fire({ icon: 'error', title: (currentLangDirection === 'rtl' ? 'خطأ بالمنتج' : 'Product Error'), text: (currentLangDirection === 'rtl' ? 'معرف المنتج غير صالح.' : 'Invalid product ID.')});
                        return;
                    }
                    if (isNaN(quantity) || quantity < 1) {
                        Swal.fire({ icon: 'error', title: (currentLangDirection === 'rtl' ? 'خطأ بالكمية' : 'Quantity Error'), text: (currentLangDirection === 'rtl' ? 'يرجى إدخال كمية صحيحة.' : 'Please enter a valid quantity.')});
                        return;
                    }
                    if (isNaN(productPrice) || productPrice < 0) {
                        Swal.fire({ icon: 'error', title: (currentLangDirection === 'rtl' ? 'خطأ بالسعر' : 'Price Error'), text: (currentLangDirection === 'rtl' ? 'سعر المنتج غير صالح.' : 'Invalid product price.')});
                        return;
                    }

                    const productForCart = {
                        productId: productId, // <<<--- تم استخدام اسم الحقل الصحيح هنا
                        title: productTitleForCart,
                        price: productPrice,
                        imageUrl: productImage,
                        quantity: quantity
                    };

                    let cart = JSON.parse(localStorage.getItem('cart')) || [];
                    // <<<--- البحث باستخدام productId ---<<<
                    const existingProductIndex = cart.findIndex(p => p.productId === productForCart.productId);

                    if (existingProductIndex > -1) {
                        cart[existingProductIndex].quantity += productForCart.quantity;
                    } else {
                        cart.push(productForCart);
                    }
                    localStorage.setItem('cart', JSON.stringify(cart));

                    if(quantitySection) quantitySection.classList.add("d-none");
                    if(addToCartBtn) addToCartBtn.classList.remove("d-none");
                    if(quantityInput) quantityInput.value = 1;

                    updateCartBadge();
                    Swal.fire({
                        icon: 'success',
                        title: (currentLangDirection === 'rtl' ? 'أُضيف للسلة!' : 'Added to Cart!'),
                        toast: true,
                        position: currentLangDirection === 'rtl' ? 'top-start' : 'top-end',
                        showConfirmButton: false,
                        timer: 1500,
                        timerProgressBar: true,
                        customClass: { popup: 'swal2-toast' }
                    });
                });
            });
            updateCartBadge(); // Initial call
        });
    </script>
}
