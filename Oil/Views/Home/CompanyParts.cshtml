@* Предполагается, что это файл Views/Home/CompanyParts.cshtml *@
@* Также предполагается, что модели Product и ProductCategory находятся в Oil.Models *@
@using Oil.Models
@{
    Layout = "~/Views/Shared/_Layout.cshtml"; // تأكد أن هذا المسار صحيح

    // الحصول على اتجاه اللغة الحالي من الكوكيز أو الافتراضي إلى العربية
    var currentLanguageCookie = Context.Request.Cookies["Language"];
    var initialDirection = (currentLanguageCookie == "en") ? "ltr" : "rtl";
    var currentLang = initialDirection == "rtl" ? "ar" : "en";

    // نصوص لرسالة "لا توجد منتجات"
    var noProductsInitialTextKey = initialDirection == "rtl" ? "لا توجد منتجات معروضة حاليا." : "There are no products to display currently.";
    var noProductsFilterTextAr = "لا توجد منتجات تطابق هذا الفلتر حاليًا.";
    var noProductsFilterTextEn = "No products match this filter currently.";

    // عنوان الصفحة
    var pageTitleAr = ViewData["SelectedCategoryNameAr"] as string ?? "أقسام المنتجات";
    var pageTitleEn = ViewData["SelectedCategoryNameEn"] as string ?? "Product Categories";
    var pageTitleLocalized = initialDirection == "rtl" ? pageTitleAr : pageTitleEn;

    // الفئة المحددة (لتمييز الفلتر النشط للشركات)
    var selectedCategoryId = ViewData["SelectedCategoryId"]?.ToString() ?? "all";

    // المنتجات وفئات الفلتر (الشركات) من ViewBag
    var productsToDisplay = ViewBag.ProductsToDisplay as List<Product> ?? new List<Product>();
    var filterCategories = ViewBag.FilterCategories as List<ProductCategory> ?? new List<ProductCategory>();
}

<div class="container text-center padding pb-0">
    <h2 class="section-title" data-en="@pageTitleEn" data-ar="@pageTitleAr">@pageTitleLocalized</h2>
</div>

<section class="pb-5 pt-4 company-tabs">
    <div class="container">
        <ul class="list-unstyled d-flex flex-wrap justify-content-center gap-3 gap-md-4">
            <li class="border border-primary py-2 px-4 px-md-5 rounded-pill @(selectedCategoryId == "all" ? "active-filter" : "") filter-item"
                data-en="All" data-ar="الكل" data-filter-id="all" style="cursor:pointer; transition: all 0.3s ease;">
                @(initialDirection == "rtl" ? "الكل" : "All")
            </li>
          

                @foreach (var categoryFilterItem in filterCategories) 
                {
                if (categoryFilterItem.Products != null && categoryFilterItem.Products.Any())
                {
                    <li class="border border-primary py-2 px-4 px-md-5 rounded-pill @(categoryFilterItem.Id.ToString() == selectedCategoryId ? "active-filter" : "") filter-item"
                        data-en="@categoryFilterItem.NameEn"
                        data-ar="@categoryFilterItem.NameAr"
                        data-filter-id="@categoryFilterItem.Id" 
                        style="cursor:pointer; transition: all 0.3s ease;">
                        @(initialDirection == "rtl" ? categoryFilterItem.NameAr : categoryFilterItem.NameEn)
                    </li>
                }
            }
        </ul>
    </div>
</section>

<section class="ships-products padding pt-4">
    <div class="container text-center" data-aos="fade" data-aos-delay="100">
        <div class="row g-4 justify-content-center" id="products-container">
            @if (productsToDisplay.Any())
            {
                foreach (var product in productsToDisplay)
                {
                    var productPrice = product.Price;
                    var productImage = Url.Content(string.IsNullOrEmpty(product.ImageUrl) ? "/images/products/default.png" : product.ImageUrl);

                    var productTitleLocalized = currentLang == "ar" ? product.TitleAr : product.TitleEn;
                    if (string.IsNullOrEmpty(productTitleLocalized)) productTitleLocalized = product.TitleAr ?? product.TitleEn;

                    var btnTextAddToCartLocalized = currentLang == "ar" ? "اضافه للسلة" : "Add To Cart";
                    var btnTextConfirmLocalized = currentLang == "ar" ? "تأكيد" : "Confirm";
                    var btnTextDetailsLocalized = currentLang == "ar" ? "عرض التفاصيل" : "Show Details";
                    var currencyLocalized = currentLang == "ar" ? "جنيه" : "EGP";

                    <div class="col-6 col-md-4 col-lg-3 d-flex product-card-item"
                         data-product-id="@product.Id"
                         data-title-ar="@product.TitleAr"
                         data-title-en="@product.TitleEn"
                         data-price="@productPrice"
                         data-image="@productImage"
                         data-category-id="@product.CategoryId"
                         style="min-height:420px; display: flex !important;">
                        <div class="card w-100 shadow-sm product-card-hover">
                            <div class="img m-0" style="height: 200px; overflow:hidden; padding: 10px; background-color: #f8f9fa;">
                                <img style="width:100%; height:100%; object-fit: contain;" src="@productImage" alt="@productTitleLocalized" loading="lazy" onerror="this.onerror=null;this.src='/images/products/default.png';">
                            </div>
                            <div class="content d-flex flex-column gap-1 p-2 p-md-3 flex-grow-1">
                                <h3 class="fs-6 fw-semibold product-title" data-en="@product.TitleEn" data-ar="@product.TitleAr" style="min-height: 3em; max-height: 3em; overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical;">@productTitleLocalized</h3>
                                <span class="text-danger fs-5 fw-bold mt-auto product-price" data-ar="@product.Price جنيه" data-en="EGP @product.Price">@product.Price @currencyLocalized</span>
                                <div class="mt-2 d-grid gap-1">
                                    <a href="@Url.Action("productDetail", "Home", new { id = product.Id })" class="btn btn-sm btn-outline-info show-details w-100 mb-1" data-ar="تفاصيل المنتج" data-en="Products Details">@btnTextDetailsLocalized</a>
                                    <button class="btn btn-sm btn-danger add-to-cart w-100" data-ar="اضافه للسلة" data-en="Add To Cart">@btnTextAddToCartLocalized</button>
                                </div>
                                <div class="quantity-section d-none mt-2 p-1" style="display: flex; justify-content: space-between; gap: 5px;">
                                    <input type="number" class="form-control form-control-sm quantity-input" min="1" value="1" style="width: 70px;" aria-label="Quantity" />
                                    <button class="btn btn-sm btn-success confirm-add flex-grow-1" data-ar="تأكيد" data-en="Confirm">@btnTextConfirmLocalized</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            <div class="col-12 js-no-products-message d-none text-center py-5">
                <i class="fas fa-box-open fa-3x text-muted mb-3"></i>
                <p class="text-muted fs-5 no-products-text"></p>
            </div>
        </div>
    </div>
</section>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        function getCurrentLanguage() {
            return document.documentElement.getAttribute('dir') === 'rtl' ? 'ar' : 'en';
        }

        if (typeof updateCartBadge !== 'function') {
            function updateCartBadge() {
                try {
                    const cart = JSON.parse(localStorage.getItem('cart')) || [];
                    const totalQuantity = cart.reduce((sum, p) => sum + (p.quantity || 0), 0);
                    const badge = document.querySelector(".fixed-cart-button .badge");
                    if (badge) {
                        badge.textContent = totalQuantity;
                        badge.style.display = totalQuantity > 0 ? 'inline-block' : 'none';
                    }
                } catch (e) {
                    console.error("Error updating cart badge:", e);
                }
            }
        }

        document.addEventListener("DOMContentLoaded", function () {
            const productsContainer = document.getElementById("products-container");
            const filterItems = document.querySelectorAll(".company-tabs ul .filter-item");
            const noProductsMessageContainer = document.querySelector(".js-no-products-message");
            const noProductsTextElement = noProductsMessageContainer ? noProductsMessageContainer.querySelector(".no-products-text") : null;

            const noProductsInitialTextAr = "@Html.Raw(System.Text.Encodings.Web.JavaScriptEncoder.Default.Encode(noProductsInitialTextKey))";
            const noProductsInitialTextEn = "@Html.Raw(System.Text.Encodings.Web.JavaScriptEncoder.Default.Encode(noProductsInitialTextKey.Replace("لا توجد منتجات معروضة حاليا.", "There are no products to display currently.")))";
            const noProductsFilterTextArJS = "@Html.Raw(System.Text.Encodings.Web.JavaScriptEncoder.Default.Encode(noProductsFilterTextAr))";
            const noProductsFilterTextEnJS = "@Html.Raw(System.Text.Encodings.Web.JavaScriptEncoder.Default.Encode(noProductsFilterTextEn))";

            const allProductCards = productsContainer ? Array.from(productsContainer.querySelectorAll(".product-card-item")) : [];

            function applyFilter(selectedFilterId) {
                let visibleProductsCount = 0;
                allProductCards.forEach(card => {
                    const cardCategoryId = card.getAttribute("data-category-id");
                    const matchesFilter = (selectedFilterId === "all" || cardCategoryId === selectedFilterId);

                    if (matchesFilter) {
                        card.style.setProperty('display', 'flex', 'important');
                        visibleProductsCount++;
                    } else {
                        card.style.setProperty('display', 'none', 'important');
                    }
                });
                updateNoProductsMessage(visibleProductsCount); // تم تبسيط الاستدعاء
            }

            function updateNoProductsMessage(visibleCount) {
                if (!noProductsMessageContainer || !noProductsTextElement) return;

                const currentLang = getCurrentLanguage();
                const noProductsOriginallyOnPage = allProductCards.length === 0;

                if (noProductsOriginallyOnPage) {
                    noProductsTextElement.textContent = currentLang === 'ar' ? noProductsInitialTextAr : noProductsInitialTextEn;
                    noProductsMessageContainer.classList.remove('d-none');
                } else if (visibleCount === 0) {
                    noProductsTextElement.textContent = currentLang === 'ar' ? noProductsFilterTextArJS : noProductsFilterTextEnJS;
                    noProductsMessageContainer.classList.remove('d-none');
                } else {
                    noProductsMessageContainer.classList.add('d-none');
                }
            }

            filterItems.forEach(item => {
                item.addEventListener("click", () => {
                    const selectedFilterId = item.getAttribute('data-filter-id');
                    filterItems.forEach(i => i.classList.remove('active-filter'));
                    item.classList.add('active-filter');
                    applyFilter(selectedFilterId);

                    const langForTitles = getCurrentLanguage(); // استخدام اللغة الحالية الفعلية
                    const categoryName = item.dataset[langForTitles] || item.textContent.trim();
                    const pageTitleBaseAr = "@Html.Raw(System.Text.Encodings.Web.JavaScriptEncoder.Default.Encode(pageTitleAr))";
                    const pageTitleBaseEn = "@Html.Raw(System.Text.Encodings.Web.JavaScriptEncoder.Default.Encode(pageTitleEn))";

                    let newDocumentTitle = "";
                    let newH2Text = "";

                    if (selectedFilterId === "all") {
                        newDocumentTitle = langForTitles === 'ar' ? pageTitleBaseAr : pageTitleBaseEn;
                        newH2Text = newDocumentTitle;
                    } else {
                        newDocumentTitle = langForTitles === 'ar' ? `${categoryName} - ${pageTitleBaseAr}` : `${categoryName} - ${pageTitleBaseEn}`;
                        newH2Text = categoryName;
                    }
                    document.title = newDocumentTitle;
                    const h2TitleElement = document.querySelector('.section-title[data-ar][data-en]');
                    if(h2TitleElement) {
                        h2TitleElement.textContent = newH2Text;
                    }
                });
            });

            const initialSelectedFilterIdFromServer = "@Html.Raw(selectedCategoryId)";
            const activeFilterElement = document.querySelector(`.filter-item[data-filter-id="${initialSelectedFilterIdFromServer}"]`);

            if (activeFilterElement) {
                 applyFilter(initialSelectedFilterIdFromServer); // طبق الفلتر المحدد من الخادم
            } else { // إذا لم يكن هناك فلتر محدد من الخادم أو لم يتم العثور عليه، طبق "الكل"
                const allFilterButton = document.querySelector('.filter-item[data-filter-id="all"]');
                if (allFilterButton) {
                    filterItems.forEach(i => i.classList.remove('active-filter'));
                    allFilterButton.classList.add('active-filter');
                }
                applyFilter("all");
            }


            if (productsContainer) {
                productsContainer.addEventListener('click', function (event) {
                    const target = event.target;
                    const card = target.closest('.product-card-item');
                    if (!card) return;

                    const addToCartBtn = card.querySelector(".add-to-cart");
                    const quantitySection = card.querySelector(".quantity-section");
                    const confirmAddBtn = card.querySelector(".confirm-add");
                    const quantityInput = card.querySelector(".quantity-input");

                    if (target.classList.contains('add-to-cart') || (target.parentElement && target.parentElement.classList.contains('add-to-cart'))) {
                        if (quantitySection) quantitySection.classList.remove("d-none");
                        if (addToCartBtn) addToCartBtn.classList.add("d-none");
                    } else if (target.classList.contains('confirm-add') || (target.parentElement && target.parentElement.classList.contains('confirm-add'))) {
                        const productIdString = card.getAttribute("data-product-id");
                        const productId = parseInt(productIdString);

                        const titleAr = card.getAttribute("data-title-ar") || "";
                        const titleEn = card.getAttribute("data-title-en") || "";

                        // !! تعديل هنا: استخدام اللغة الحالية لتحديد عنوان المنتج للسلة
                        const currentCartLang = getCurrentLanguage();
                        let productTitleForCart = (currentCartLang === 'ar' ? titleAr : titleEn).trim();
                        if (!productTitleForCart) {
                            productTitleForCart = (titleAr || titleEn || (currentCartLang === 'ar' ? "منتج" : "Product")).trim();
                        }

                        const priceString = card.getAttribute("data-price");
                        const productPrice = parseFloat(priceString);
                        const productImage = card.getAttribute("data-image") || "/images/products/default.png";
                        const quantity = quantityInput ? (parseInt(quantityInput.value) || 1) : 1;

                        if (isNaN(productId) || productId <= 0) {
                            Swal.fire({ icon: 'error', title: (currentCartLang === 'ar' ? 'خطأ بالمنتج' : 'Product Error'), text: (currentCartLang === 'ar' ? 'معرف المنتج غير صالح.' : 'Invalid product ID.')});
                            return;
                        }
                        if (isNaN(quantity) || quantity < 1) {
                            Swal.fire({ icon: 'error', title: (currentCartLang === 'ar' ? 'خطأ بالكمية' : 'Quantity Error'), text: (currentCartLang === 'ar' ? 'يرجى إدخال كمية صحيحة.' : 'Please enter a valid quantity.')});
                            return;
                        }
                        if (isNaN(productPrice) || productPrice < 0) {
                            Swal.fire({ icon: 'error', title: (currentCartLang === 'ar' ? 'خطأ بالسعر' : 'Price Error'), text: (currentCartLang === 'ar' ? 'سعر المنتج غير صالح.' : 'Invalid product price.')});
                            return;
                        }

                        const productForCart = {
                            productId: productId,
                            title: productTitleForCart,
                            price: productPrice,
                            imageUrl: productImage,
                            quantity: quantity
                        };

                        let cart = [];
                        try { cart = JSON.parse(localStorage.getItem("cart")) || []; } catch (e) { console.error("Error parsing cart from localStorage", e); }

                        const existingProductIndex = cart.findIndex(p => p.productId === productForCart.productId);

                        if (existingProductIndex > -1) {
                            cart[existingProductIndex].quantity += productForCart.quantity;
                        } else {
                            cart.push(productForCart);
                        }
                        try { localStorage.setItem("cart", JSON.stringify(cart)); } catch (e) { console.error("Error saving cart to localStorage", e); }

                        updateCartBadge();

                        if (quantitySection) quantitySection.classList.add("d-none");
                        if (addToCartBtn) addToCartBtn.classList.remove("d-none");
                        if (quantityInput) quantityInput.value = 1;

                        // !! تعديل هنا: استخدام اللغة الحالية لعنوان Swal
                        Swal.fire({
                            icon: 'success',
                            title: (currentCartLang === 'ar' ? 'أُضيف للسلة !' : 'Added to Cart !'),
                            toast: true,
                            position: 'top-end', // تعديل لـ RTL
                            showConfirmButton: false,
                            timer: 2500,
                            timerProgressBar: true,
                            customClass: { popup: 'swal2-toast' },
                            didOpen: (toast) => {
                                toast.addEventListener('mouseenter', Swal.stopTimer)
                                toast.addEventListener('mouseleave', Swal.resumeTimer)
                            }
                        });
                    }
                });
            }
            updateCartBadge();
        });
    </script>
}

<style>
    .company-tabs .active-filter {
        background-color: #0d6efd; /* Bootstrap primary color */
        color: #dc3545 !important;
        border-color: #0d6efd !important;
        font-weight: 600;
    }

    .company-tabs .filter-item:hover:not(.active-filter) {
        background-color: #e9ecef;
        border-color: #0b5ed7;
    }

    .product-card-hover {
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        border: 1px solid #eee;
        border-radius: 0.375rem; /* Bootstrap's default rounded */
    }

        .product-card-hover:hover {
            transform: translateY(-5px);
            box-shadow: 0 .5rem 1rem rgba(0,0,0,.12) !important;
        }

    .product-card-item .img {
        background-color: #fff; /* Ensure background for images with transparency */
    }
</style>
